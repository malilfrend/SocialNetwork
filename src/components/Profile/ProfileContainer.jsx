import React from 'react';import Profile from "./Profile";import {connect} from "react-redux";import {	getUserProfileThunk, saveUserPhoto, setUserProfile, setUserStatus,	setUserStatusThunk, updateUserInfoThunk, updateUserPhoto,	updateUserStatusThunk} from "../../redux/profile-reducer";import withRouter from "../HOC/withRouter";import {compose} from "redux";import withAuthRedirect from "../HOC/withAuthRedirect";import Preloader from "../common/Preloader/Preloader";class ProfileContainer extends React.Component{	updateProfile() {		let userId = this.props.userId		if(!userId) {			userId = this.props.id		}		this.props.getUserProfileThunk(userId)		this.props.setUserStatusThunk(userId)	}	componentDidMount() {		this.updateProfile()	}	componentDidUpdate(prevProps, prevState, snapshot) {		if(this.props.userId !== prevProps.userId) {			this.updateProfile()		}	}	componentWillUnmount() {		this.props.setUserProfile({})		this.props.setUserStatus('')	}		render() {		{this.props.profile && <Preloader/>}				return (				<div>					<Profile						{...this.props}						isOwner={!this.props.userId}					/>				</div>		)	}}let mapStateToProps = (state) => {	return {		profile: state.profilePage.profile,		status: state.profilePage.status,		id: state.auth.id,	}}export default compose(	connect(mapStateToProps, {getUserProfileThunk,		setUserProfile,		setUserStatusThunk,		updateUserStatusThunk,		saveUserPhoto,		updateUserInfoThunk,		setUserStatus,	}),	withRouter,	withAuthRedirect,	React.memo	)(ProfileContainer)