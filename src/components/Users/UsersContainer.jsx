import React from 'react';import {connect} from "react-redux";import {	follow,	setCurrentPage,	setUsers,	unfollow,	setTotalUsersCount,	toggleIsFetching,} from "../../redux/users-reducer";import * as axios from "axios";import Users from "./Users";import Preloader from "../common/Preloader/Preloader";class UsersContainer extends React.Component{		componentDidMount() {		if (this.props.usersData.length === 0) {			this.props.toggleIsFetching(true)			axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)				.then(r => {					this.props.toggleIsFetching(false)					this.props.setUsers(r.data.items)					this.props.setTotalUsersCount(r.data.totalCount)				})		}	}	onPageChanched = (pageNumber) => {		this.props.setCurrentPage(pageNumber)		this.props.toggleIsFetching(true)		axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)			.then(r => {				this.props.toggleIsFetching(false)				this.props.setUsers(r.data.items)			})	}		render() {		return <>			{ this.props.isFetching &&				<Preloader />			}			< Users				totalUsersCount={this.props.totalUsersCount}				pageSize={this.props.pageSize}				currentPage={this.props.currentPage}				onPageChanched={this.onPageChanched}				usersData={this.props.usersData}				unfollow={this.props.unfollow}				follow={this.props.follow}			/>		</>	}}let mapStateToProps = (state) => {	return {		usersData: state.usersPage.usersData,		pageSize: state.usersPage.pageSize,		totalUsersCount: state.usersPage.totalUsersCount,		currentPage: state.usersPage.currentPage,		isFetching: state.usersPage.isFetching,	}}// let mapDispatchToProps = (dispatch) => {// 	return {// 		follow: (userId) => {// 			dispatch(followActionCreator(userId))// 		},// 		unfollow: (userId) => {// 			dispatch(unfollowActionCreator(userId))// 		},// 		setUsers: (users) => {// 			dispatch(setUsersActionCreator(users))// 		},// 		setCurrentPage: (pageNumber) => {// 			dispatch(setCurrentPageActionCreator(pageNumber))// 		},// 		setTotalUsersCount: (totalCount) => {// 			dispatch(setTotalUsersCountActionCreator(totalCount))// 		},// 		toggleIsFetching: (isFetching) => {// 			dispatch(toggleIsFetchingActionCreator(isFetching))// 		},// 	}// }export default connect(mapStateToProps, {	follow,	unfollow,	setUsers,	setCurrentPage,	setTotalUsersCount,	toggleIsFetching,})(UsersContainer);