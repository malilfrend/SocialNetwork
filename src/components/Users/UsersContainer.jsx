import React from 'react';import {connect} from "react-redux";import {	setCurrentPage,	toggleIsFollowingInProgress,	follow,	unfollow, requestUsers,} from "../../redux/users-reducer";import Users from "./Users";import Preloader from "../common/Preloader/Preloader";import {compose} from "redux";import {	getCurrentPageSelector,	getFollowingInProgressSelector,	getIsFetchingSelector,	getPageSizeSelector,	getTotalUsersCountSelector,	getUsersSelector} from "../../redux/users-selectors";class UsersContainer extends React.Component{		componentDidMount() {		if (this.props.usersData.length === 0) {			this.props.requestUsers(this.props.currentPage, this.props.pageSize)		}	}		onPageChanched = (pageNumber) => {		this.props.setCurrentPage(pageNumber)		this.props.requestUsers(pageNumber, this.props.pageSize)	}		render() {		return <>			{ this.props.isFetching &&				<Preloader />			}			< Users				totalUsersCount={this.props.totalUsersCount}				pageSize={this.props.pageSize}				currentPage={this.props.currentPage}				onPageChanched={this.onPageChanched}				usersData={this.props.usersData}				follow={this.props.follow}				unfollow={this.props.unfollow}				followingInProgress={this.props.followingInProgress}			/>		</>	}}// let mapStateToProps = (state) => {// 	return {// 		usersData: state.usersPage.usersData,// 		pageSize: state.usersPage.pageSize,// 		totalUsersCount: state.usersPage.totalUsersCount,// 		currentPage: state.usersPage.currentPage,// 		isFetching: state.usersPage.isFetching,// 		followingInProgress: state.usersPage.followingInProgress,// 	}// }let mapStateToProps = (state) => {	return {		usersData: getUsersSelector(state),		pageSize: getPageSizeSelector(state),		totalUsersCount: getTotalUsersCountSelector(state),		currentPage: getCurrentPageSelector(state),		isFetching: getIsFetchingSelector(state),		followingInProgress: getFollowingInProgressSelector(state),	}}export default compose(connect(mapStateToProps, {	follow,	unfollow,	setCurrentPage,	requestUsers,	toggleIsFollowingInProgress}),	React.memo)(UsersContainer)