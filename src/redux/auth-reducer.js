import {authAPI, securityAPI} from "../api/api";const SET_USER_DATA = 'social_network/auth/SET_USER_DATA'const LOG_OUT = 'social_network/auth/LOG_OUT'const SET_CAPTCHA = 'social_network/auth/SET_CAPTCHA'let initialState = {	id: null,	login: null,	email: null,	isAuth: false,	isFetching: false,	captcha: ''}const authReducer = (state = initialState, action) => {	switch (action.type) {		case SET_USER_DATA:			return {				...state,				...action.data,				isAuth: true			}		case LOG_OUT:			return {				...state,				...initialState			}		case SET_CAPTCHA:			return {				...state,				captcha: action.captcha			}		default:			return state	}}// actionCreatorconst setAuthUserData = (id, email, login ) => {	return {		type: SET_USER_DATA,		data: {			id,			email,			login,		}	}}const logoutAC = () => {	return {		type: LOG_OUT	}}const setCaptchaUrl = (captcha) => {	return {		type: SET_CAPTCHA,		captcha	}}// thunk creatorconst setAuthData = () => async (dispatch) => {	let data = await authAPI.authMe()	if (data.resultCode === 0) {		let {id, email, login} = data.data		dispatch(setAuthUserData(id, email, login))	}}const getCaptchaUrl = () => async (dispatch) => {	let data = await securityAPI.getCaptchaUrl()	const captchaUrl = data.url	dispatch(setCaptchaUrl(captchaUrl))}const login = (email, password, rememberMe, setStatus, setSubmitting, captchaInput) => async (dispatch) => {	let data = await authAPI.login(email, password, rememberMe, captchaInput)	if (data.resultCode === 0) {		dispatch(setAuthData())	}	if (data.resultCode === 1) {		setStatus(data.messages)	}	if (data.resultCode === 10) {		dispatch(getCaptchaUrl())	}	setSubmitting(false)}const logout = () => async (dispatch) => {	let data = await authAPI.logout()	if (data.resultCode === 0) {		dispatch(logoutAC())	}}export {authReducer, setAuthUserData, setAuthData, login, logout}