import {authAPI} from "../api/api";const SET_USER_DATA = 'SET_USER_DATA'const LOG_OUT = 'LOG_OUT'let initialState = {	id: null,	login: null,	email: null,	isAuth: false,	isFetching: false,}const authReducer = (state = initialState, action) => {	switch (action.type) {		case SET_USER_DATA:			return {				...state,				...action.data,				isAuth: true			}		case LOG_OUT:			return {				...state,				...initialState			}		default:			return state	}}// actionCreatorconst setAuthUserData = (id, email, login ) => {	return {		type: SET_USER_DATA,		data: {			id,			email,			login,		}	}}const logoutAC = () => {	return {		type: LOG_OUT	}}// thunk creatorconst setAuthData = () => {	return (		(dispatch) => {			return authAPI.authMe().then(data => {				if (data.resultCode === 0) {					let {id, email,login} = data.data					dispatch(setAuthUserData(id, email, login))				}			})		}	)}const login = (email, password, rememberMe, setStatus, setSubmitting) => {	return (		(dispatch) => {			authAPI.login(email, password, rememberMe).then(data => {				if(data.resultCode === 0){					dispatch(setAuthData())				}				if(data.resultCode === 1) {					setStatus(data.messages)				}				setSubmitting(false)			})				}	)}const logout = () => {	return (		(dispatch) => {			authAPI.logout().then(data => {				if (data.resultCode === 0) {					dispatch(logoutAC())				}							})		}	)}export {authReducer, setAuthUserData, setAuthData, login, logout}